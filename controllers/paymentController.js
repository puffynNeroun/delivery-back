const express = require('express');
const router = express.Router();
const { supabase } = require('../config/db.js');

// 1. –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ –Ω–µ—Ç API –°–ë–ò–°)
const processPayment = async (req, res) => {
    const { orderId } = req.body;
    if (!orderId) return res.status(400).json({ message: "orderId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    const { data: order, error } = await supabase.from('orders').select('*').eq('id', orderId).single();
    if (error || !order) return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    return res.json({
        message: "–ü–ª–∞—Ç–µ–∂ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)",
        payment_url: "https://example.com/pay",
        orderId,
    });
};

// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–∑–∞–≥–ª—É—à–∫–∞)
const handlePaymentWebhook = async (req, res) => {
    const { orderId, payment_status } = req.body;
    if (!orderId || !payment_status) return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });

    const { error } = await supabase.from('orders').update({ payment_status }).eq('id', orderId);
    if (error) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞" });

    return res.json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω" });
};
const markOrderAsPaid = async (req, res) => {
    const { orderId } = req.params;

    if (!orderId || typeof orderId !== 'string') {
        return res.status(400).json({ message: 'orderId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' });
    }

    const { data, error } = await supabase
        .from('orders')
        .update({ payment_status: 'paid' })
        .eq('id', orderId)
        .select()
        .maybeSingle(); // üëà –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–æ–≥ single()

    if (error || !data) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
        return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω', error });
    }

    return res.json({ message: '–ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π', order: data });
};







module.exports = { processPayment, handlePaymentWebhook, markOrderAsPaid};
