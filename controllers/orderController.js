const { supabase } = require('../config/db');

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
const createOrder = async (req, res) => {
    try {
        const userId = req.user.id;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        const { data: cartItems, error: cartError } = await supabase
            .from('cart')
            .select('product_id, quantity')
            .eq('user_id', userId);

        if (cartError || !cartItems.length) {
            return res.status(400).json({ message: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
        const productIds = cartItems.map(item => item.product_id);
        const { data: products, error: productsError } = await supabase
            .from('products')
            .select('id, price')
            .in('id', productIds);

        if (productsError || !products.length) {
            return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        let calculatedTotal = 0;
        cartItems.forEach(item => {
            const product = products.find(p => p.id === item.product_id);
            if (product) calculatedTotal += product.price * item.quantity;
        });

        // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        const { data: order, error: orderError } = await supabase
            .from('orders')
            .insert([{
                user_id: userId,
                total_price: calculatedTotal,
                payment_method: req.body.paymentMethod || "–ù–µ —É–∫–∞–∑–∞–Ω",
                shipping_address: req.body.shippingAddress || "–ù–µ —É–∫–∞–∑–∞–Ω",
                status: '–Ω–æ–≤—ã–π',
                payment_status: 'pending'
            }])
            .select()
            .single();

        if (orderError) throw orderError;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ `order_items`
        const orderItemsData = cartItems.map(item => ({
            order_id: order.id,
            product_id: item.product_id,
            quantity: item.quantity
        }));

        const { error: orderItemsError } = await supabase
            .from('order_items')
            .insert(orderItemsData);

        if (orderItemsError) {
            console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑:", orderItemsError);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑", error: orderItemsError.message });
        }

        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await supabase.from('cart').delete().eq('user_id', userId);

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const { data: fullOrder, error: fullOrderError } = await supabase
            .from('orders')
            .select('*, order_items(*)') // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
            .eq('id', order.id)
            .single();

        if (fullOrderError) throw fullOrderError;

        res.status(201).json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', order: fullOrder });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
const getOrderDetails = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user.id;

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const { data: order, error: orderError } = await supabase
            .from('orders')
            .select('*, order_items(*)') // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
            .eq('id', id)
            .single();

        if (orderError || !order) return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –æ–Ω –∞–¥–º–∏–Ω
        if (order.user_id !== userId && !req.user.isAdmin) {
            return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É' });
        }

        return res.json({ order });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserOrders = async (req, res) => {
    try {
        const userId = req.user.id;
        const { data: orders, error } = await supabase
            .from('orders')
            .select('*, order_items(*)') // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
            .eq('user_id', userId);

        if (error) throw error;
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
const updateOrderStatus = async (req, res) => {
    try {
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
        }

        const { id } = req.params;
        const { status } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
        const { data: order, error: orderError } = await supabase
            .from('orders')
            .select('payment_status')
            .eq('id', id)
            .single();

        if (orderError || !order) return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        if (order.payment_status !== 'paid') {
            return res.status(400).json({ message: '–ó–∞–∫–∞–∑ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω!' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        const { data, error } = await supabase
            .from('orders')
            .update({ status })
            .eq('id', id)
            .select()
            .single();

        if (error) throw error;

        res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω', order: data });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

module.exports = { createOrder, getUserOrders, updateOrderStatus, getOrderDetails };
