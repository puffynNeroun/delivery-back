const { supabase } = require('../config/db');

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
const createOrder = async (req, res) => {
    try {
        const { orderItems, totalPrice, paymentMethod, shippingAddress } = req.body;
        const userId = req.user.id;

        if (!orderItems || orderItems.length === 0) {
            return res.status(400).json({ message: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' });
        }

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        const { data: order, error: orderError } = await supabase
            .from('orders')
            .insert([{
                user_id: userId,
                total_price: totalPrice,
                payment_method: paymentMethod,
                shipping_address: shippingAddress,
                status: '–Ω–æ–≤—ã–π'
            }])
            .select()
            .single();

        if (orderError) throw orderError;

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ `order_items`
        const orderItemsData = orderItems.map(item => ({ order_id: order.id, product_id: item.product_id, quantity: item.quantity }));
        await supabase.from('order_items').insert(orderItemsData);

        // üîπ –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
        await supabase.from('cart').delete().eq('user_id', userId);

        res.status(201).json({ message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', order });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserOrders = async (req, res) => {
    try {
        const userId = req.user.id;
        const { data: orders, error } = await supabase
            .from('orders')
            .select('*')
            .eq('user_id', userId);

        if (error) throw error;
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
const updateOrderStatus = async (req, res) => {
    try {
        if (!req.user.isAdmin) {
            return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
        }

        const { id } = req.params;
        const { status } = req.body;

        const { data, error } = await supabase
            .from('orders')
            .update({ status })
            .eq('id', id)
            .select()
            .single();

        if (error) throw error;

        res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω', order: data });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

module.exports = { createOrder, getUserOrders, updateOrderStatus };
