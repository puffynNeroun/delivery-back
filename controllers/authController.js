const { supabase } = require('../config/db');

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        if (!email || !password) {
            return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const normalizedEmail = email.toLowerCase();

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞)
        const { data: existingUser, error: loginError } = await supabase.auth.signInWithPassword({
            email: normalizedEmail,
            password: 'fakePassword123' // –õ—é–±–æ–π —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        });

        if (existingUser?.user) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
        }

        // üîπ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
        const { data, error } = await supabase.auth.signUp({
            email: normalizedEmail,
            password
        });

        if (error || !data?.user) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Supabase:', error);
            return res.status(400).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error: error?.message });
        }

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Supabase:', data.user.id);

        res.status(201).json({
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            user: {
                id: data.user.id,
                email: data.user.email
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};


// üîπ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        const { data, error } = await supabase.auth.signInWithPassword({ email, password });

        if (error || !data?.user) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const userId = data.user.id;
        const userEmail = data.user.email;

        // üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ cookie
        res.cookie('token', data.session.access_token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'Strict',
            maxAge: 60 * 60 * 1000 // 1 —á–∞—Å
        });

        res.json({
            message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω',
            user: {
                id: userId,
                email: userEmail
            }
        });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const logoutUser = async (req, res) => {
    try {
        await supabase.auth.signOut();
        res.clearCookie('token', { httpOnly: true, secure: true, sameSite: 'Strict' });
        res.cookie('token', '');
        res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

module.exports = { registerUser, loginUser, logoutUser };
