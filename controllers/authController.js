const { supabase } = require('../config/db');

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        if (!email || !password) {
            return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const normalizedEmail = email.toLowerCase();

        const { data, error } = await supabase.auth.signUp({
            email: normalizedEmail,
            password
        });

        if (error) {
            return res.status(400).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error: error.message });
        }

        res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', user: data.user });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        const { data, error } = await supabase.auth.signInWithPassword({ email, password });

        if (error || !data?.session) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ cookie
        res.cookie('access_token', data.session.access_token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'Strict',
            maxAge: 60 * 60 * 1000 // 1 —á–∞—Å
        });

        res.cookie('refresh_token', data.session.refresh_token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'Strict',
            maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
        });

        res.json({
            message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω',
            user: { id: data.user.id, email: data.user.email },
            token: data.session.access_token
        });


    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞
const refreshToken = async (req, res) => {
    try {
        const refresh_token = req.cookies.refresh_token;
        if (!refresh_token) return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è refresh_token' });

        const { data, error } = await supabase.auth.refreshSession({ refresh_token });

        if (error || !data?.session) {
            return res.status(401).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh_token' });
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –∫—É–∫–∞—Ö
        res.cookie('access_token', data.session.access_token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'Strict',
            maxAge: 60 * 60 * 1000 // 1 —á–∞—Å
        });

        res.json({ message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω' });

    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

// üîπ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const logoutUser = async (req, res) => {
    try {
        await supabase.auth.signOut();
        res.clearCookie('access_token');
        res.clearCookie('refresh_token');
        res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};

const getMe = async (req, res) => {
    try {
        res.status(200).json({
            id: req.user.id,
            email: req.user.email,
            isAdmin: req.user.isAdmin
        });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è', error: error.message });
    }
};


module.exports = { registerUser, loginUser, refreshToken, logoutUser, getMe };
