const { supabase } = require('../config/db');

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getCart = async (req, res) => {
    try {
        if (!req.user) return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

        const { data: cartItems, error } = await supabase
            .from('cart')
            .select(`
                id,
                quantity,
                product_id,
                products (
                    id,
                    name,
                    price,
                    image,
                    category,
                    description
                )
            `)
            .eq('user_id', req.user.id);

        if (error) throw error;

        const enrichedItems = cartItems.map((item) => ({
            id: item.id,
            quantity: item.quantity,
            productId: item.product_id,
            ...item.products
        }));

        res.json({ items: enrichedItems });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã', error: error.message });
    }
};


// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
const addToCart = async (req, res) => {
    try {
        if (!req.user) return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

        const { product_id, quantity } = req.body;
        if (!product_id || quantity <= 0) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const { data: existingItem, error: checkError } = await supabase
            .from('cart')
            .select('*')
            .eq('user_id', req.user.id)
            .eq('product_id', product_id)
            .single();

        if (checkError && checkError.code !== 'PGRST116') throw checkError;

        if (existingItem) {
            const { error: updateError } = await supabase
                .from('cart')
                .update({ quantity: existingItem.quantity + quantity })
                .eq('id', existingItem.id);

            if (updateError) throw updateError;
        } else {
            const { error: insertError } = await supabase
                .from('cart')
                .insert([{ user_id: req.user.id, product_id, quantity }]);

            if (insertError) throw insertError;
        }

        res.json({ message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', error: error.message });
    }
};

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –û–î–ù–û–ô –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
const removeFromCart = async (req, res) => {
    try {
        if (!req.user) return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

        const { product_id } = req.body;
        if (!product_id) return res.status(400).json({ message: 'product_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const { data: existingItem, error: checkError } = await supabase
            .from('cart')
            .select('*')
            .eq('user_id', req.user.id)
            .eq('product_id', product_id)
            .single();

        if (checkError && checkError.code !== 'PGRST116') throw checkError;

        if (!existingItem) {
            return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ' });
        }

        if (existingItem.quantity > 1) {
            // 2Ô∏è‚É£ –ï—Å–ª–∏ quantity > 1, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
            const { error: updateError } = await supabase
                .from('cart')
                .update({ quantity: existingItem.quantity - 1 })
                .eq('id', existingItem.id);

            if (updateError) throw updateError;

            return res.json({ message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 1' });
        } else {
            // 3Ô∏è‚É£ –ï—Å–ª–∏ quantity === 1, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
            const { error: deleteError } = await supabase
                .from('cart')
                .delete()
                .eq('id', existingItem.id);

            if (deleteError) throw deleteError;

            return res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error: error.message });
    }
};

const clearCart = async (req, res) => {
    try {
        if (!req.user) return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

        const { error } = await supabase
            .from('cart')
            .delete()
            .eq('user_id', req.user.id);

        if (error) throw error;

        res.json({ message: '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã', error: error.message });
    }
};


module.exports = { getCart, addToCart, removeFromCart, clearCart };
